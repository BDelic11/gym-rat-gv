generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}


model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  passwordHash  String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  profile   Profile?
  workouts  Workout[]
  meals     Meal[]
  sessions  Session[]
  PasswordResetToken PasswordResetToken[]
  WeightLog WeightLog[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("sessions")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@map("password_reset_tokens")
}

model Profile {
  id            String  @id @default(cuid())
  userId        String  @unique
  age           Int?
  weight        Float?
  height        Float?
  gender        String?
  goal          String?
  activityLevel String?
  tdee          Float?
  targetCalories Int?
  targetProtein  Int?
  targetCarbs    Int?
  targetFat      Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Workout {
  id             String   @id @default(cuid())
  userId         String
  name           String
  date           DateTime @default(now())
  duration       Int?
  notes          String?
  caloriesBurned Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises Exercise[]

  @@index([userId, date])
  @@map("workouts")
}

model Exercise {
  id        String  @id @default(cuid())
  workoutId String
  name      String
  category  String? // strength | cardio | flexibility | other
  notes     String?
  order     Int     @default(0)

  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  sets    Set[]

  @@index([workoutId])
  @@map("exercises")
}

model Set {
  id         String  @id @default(cuid())
  exerciseId String
  reps       Int?
  weight     Float?
  duration   Int?
  distance   Float?
  restTime   Int?
  order      Int     @default(0)
  notes      String?

  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@index([exerciseId])
  @@map("sets")
}


model Meal {
  id        String      @id @default(cuid())
  userId    String
  type      MealType
  date      DateTime
  items     MealItem[]
  createdAt DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, date])
}


model MealItem {
  id        String   @id @default(cuid())
  mealId    String
  name      String
  quantity  Float
  unit      String
  calories  Float
  protein   Float
  carbs     Float
  fat       Float
  fiber     Float?   // add
  sugar     Float?   // add
  sodium    Float?   // add
  meal      Meal     @relation(fields: [mealId], references: [id])
}


model WeightLog {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  weight    Float

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}
model MealTemplate {
  id        String   @id @default(cuid())
  userId    String
  type      MealType
  name      String
  items     MealTemplateItem[]
  createdAt DateTime @default(now())

  @@index([userId, type])
}

model MealTemplateItem {
  id         String  @id @default(cuid())
  templateId String
  name       String
  quantity   Float
  unit       String
  calories   Float
  protein    Float
  carbs      Float
  fat        Float
  fiber      Float?
  sugar      Float?
  sodium     Float?

  template   MealTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
}
